name: Sign IPA

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sign-ipa:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install axios form-data

    - name: Create certificates directory
      run: mkdir -p certificates

    - name: Fetch latest release info
      id: fetch_release
      run: |
        latest_release=$(curl -s https://api.github.com/repos/bdgxs/Backdoor/releases/latest)
        version=$(echo "$latest_release" | jq -r '.tag_name')
        download_url=$(echo "$latest_release" | jq -r '.assets[]? | select(.name | endswith(".ipa")) | .browser_download_url')

        echo "Latest version: $version"
        echo "Download URL: $download_url"

        echo "::set-output name=version::$version"
        echo "::set-output name=download_url::$download_url"

    - name: Download latest release asset
      run: curl -L -o certificates/app.ipa ${{ steps.fetch_release.outputs.download_url }}

    - name: Run sign script
      env:
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        UDID: ${{ secrets.UDID }}  # Add your UDID as a secret in the repository settings
      run: |
        node <<'EOF'
        const axios = require('axios');
        const FormData = require('form-data');
        const fs = require('fs');

        const form = new FormData();
        form.append('ipa', fs.createReadStream('certificates/app.ipa'));
        form.append('p12', fs.createReadStream('certificates/BDG.p12'));
        form.append('mobileprovision', fs.createReadStream('certificates/BDG.mobileprovision'));
        form.append('p12_password', process.env.P12_PASSWORD);
        form.append('udid', process.env.UDID);  // Include the UDID in the form data
        form.append('save_cert', 'on'); // Set to 'on' to save certificates

        axios.post('https://api.ipasign.pro/sign', form, {
            headers: form.getHeaders()
        })
        .then(response => {
            console.log('Install Link:', response.data.installLink);
        })
        .catch(error => {
            if (error.response) {
                console.error('Error Data:', error.response.data);
                console.error('Error Status:', error.response.status);
                console.error('Error Headers:', error.response.headers);
            } else {
                console.error('Error Message:', error.message);
            }
        });
        EOF